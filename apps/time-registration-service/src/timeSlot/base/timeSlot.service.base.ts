/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TimeSlot } from "@prisma/client";

export class TimeSlotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TimeSlotCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeSlotCountArgs>
  ): Promise<number> {
    return this.prisma.timeSlot.count(args);
  }

  async timeSlots<T extends Prisma.TimeSlotFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeSlotFindManyArgs>
  ): Promise<TimeSlot[]> {
    return this.prisma.timeSlot.findMany(args);
  }
  async timeSlot<T extends Prisma.TimeSlotFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeSlotFindUniqueArgs>
  ): Promise<TimeSlot | null> {
    return this.prisma.timeSlot.findUnique(args);
  }
  async createTimeSlot<T extends Prisma.TimeSlotCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeSlotCreateArgs>
  ): Promise<TimeSlot> {
    return this.prisma.timeSlot.create<T>(args);
  }
  async updateTimeSlot<T extends Prisma.TimeSlotUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeSlotUpdateArgs>
  ): Promise<TimeSlot> {
    return this.prisma.timeSlot.update<T>(args);
  }
  async deleteTimeSlot<T extends Prisma.TimeSlotDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeSlotDeleteArgs>
  ): Promise<TimeSlot> {
    return this.prisma.timeSlot.delete(args);
  }
}
