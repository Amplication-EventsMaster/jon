/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimeSlotService } from "../timeSlot.service";
import { TimeSlotCreateInput } from "./TimeSlotCreateInput";
import { TimeSlot } from "./TimeSlot";
import { TimeSlotFindManyArgs } from "./TimeSlotFindManyArgs";
import { TimeSlotWhereUniqueInput } from "./TimeSlotWhereUniqueInput";
import { TimeSlotUpdateInput } from "./TimeSlotUpdateInput";

export class TimeSlotControllerBase {
  constructor(protected readonly service: TimeSlotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeSlot })
  async createTimeSlot(
    @common.Body() data: TimeSlotCreateInput
  ): Promise<TimeSlot> {
    return await this.service.createTimeSlot({
      data: data,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeSlot] })
  @ApiNestedQuery(TimeSlotFindManyArgs)
  async timeSlots(@common.Req() request: Request): Promise<TimeSlot[]> {
    const args = plainToClass(TimeSlotFindManyArgs, request.query);
    return this.service.timeSlots({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async timeSlot(
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlot | null> {
    const result = await this.service.timeSlot({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        startTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTimeSlot(
    @common.Param() params: TimeSlotWhereUniqueInput,
    @common.Body() data: TimeSlotUpdateInput
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.updateTimeSlot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeSlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTimeSlot(
    @common.Param() params: TimeSlotWhereUniqueInput
  ): Promise<TimeSlot | null> {
    try {
      return await this.service.deleteTimeSlot({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          startTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
